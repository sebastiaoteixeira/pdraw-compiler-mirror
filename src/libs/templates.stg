// Template para definição do canvas
canvasDefinition(title, width, height) ::= <<
canvas = Canvas("<title>", <width>, <height>)
>>

// Template para definição da caneta
penDefinition(name, properties) ::= <<
<name> = {
    <properties; separator="\n,">
}
>>

property(key, value) ::= << 
"<key>": <value> 
>>

//Template para criar a caneta
penCreation(canvas, name) ::= <<
<name> = Pen(<canvas>, <pentype>)
>>

// Templates para comandos da caneta
penForward(name, distance) ::= <<
<name>.forward(<distance>)
>>

penBackward(name, distance) ::= <<
<name>.backward(<distance>)
>>

penRight(name, angle) ::= <<
<name>.right(<angle>)
>>

penLeft(name, angle) ::= <<
<name>.left(<angle>)
>>

ExprPenUnary(name,op) ::= <<
<name>.<op>()
>>

ExprPen(name,op,value) ::= <<
<pen>.<func>(<paramenters>)
>>//no code gen verificar se color passa entre aspas

//Templates para comandos
ExprUnary(operator, op) ::= <<
<operator> <op>
>>

ExprBinary(op1, op2, operator) ::= <<
<op1> <operator> <op2>
>>

convToRad(op) ::= <<
radians(<op>)
>>

visitPoint(op1,op2) ::= <<
(<op1>,<op2>)
>>

declarationContext(var) ::= <<
<var> = None
>>

pause(time) ::= <<
sleep(<time>)
>>

stdin() ::= <<
input()
>>

stdout(op) ::= <<
print(str(<op>))
>>

toString(op) ::= <<
str(<op>)
>>

toInt(op) ::= <<
int(<op>)
>>

toReal(op) ::= <<
float(<op>)
>>

concat(op1,op2) ::= <<
str(<op1>) + str(<op2>)
>>

assign(var, value) ::= <<
<var> = <value>
>>

// Template for if 
if(condition, statement) ::= <<
if <condition>: 
    <statement>
>>

// Template for forLoop
for(init, condition, expression, statements) ::= <<
<init>
while <condition>:
    <statements> 
    <expression>
>>

// Template for while
while(condition, statements) ::= <<
while <condition>:
    <statements>
>>

// Template for until
until(condition, statements) ::= <<
while not <condition>:
    <statements>
>>
