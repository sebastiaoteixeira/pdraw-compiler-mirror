// Main template
main(compound) ::= <<
def main():
    <compound>

if __name__ == "__main__":
    main()
>>

// Template for CompoundContext
compoundContext(statement) ::= <<
<statement; separator="\n">
>>


// Template for canvas definition
canvasDefinition(title, width, height) ::= <<
canvas = Canvas("<title>", <width>, <height>)
>>

// Template for PenType definition
pentype(pentypeName, properties) ::= <<
<pentypeName> = {
    <properties; separator=",">
}
>>

// Template for pen creation
penCreation(penType) ::= <<
canvas = Canvas("", 500, 500)
<name> = Pen(canvas, <pentype>)
>>

// A single property
property(key, value) ::= << 
"<key>": <value> 
>>

// Unary operations templates
// Template for unary_operations
unary_operations(operator, op) ::= <<
<operator><op>
>>

// Template for ExprPenUnary
ExprPenUnary(penName,op) ::= <<
<penName>.<op>()
>>

// Template for ExprPenOperator and ExprSetProperty
ExprPen(name,op,value) ::= <<
<name>.<op>(<value>)
>>

// Template for binary_operations
binary_operations(op1, op2, operator) ::= <<
<op1> <operator> <op2>
>>

// Template for conv_rad
conv_rad(op) ::= <<
radians(<op>)
>>

// Template for point
point(op1,op2) ::= <<
Point(<op1>,<op2>)
>>

// Template for DeclarationContext
declarationContext(var) ::= <<
<var> = None
>>

// Template for Execution
execution(penId, fileName) ::= <<
exec(\"<fileName>\", <penId>)
>>

// Template for pause (time in microseconds)
pause(time) ::= <<
sleep(<time>/1_000_000)
>>

// Template for ExprStringConcat
concat(op1,op2) ::= <<
str(<op1>) + str(<op2>)
>>

// Template for ExprAssign
assign(var, value) ::= <<
<var> = <value>
>>


// Std(in/out) templates
// Template for ExprStdin
stdin(message) ::= <<
input(<message>)
>>

// Template for ExprStdout
stdout(message) ::= <<
print(<message>)
>>


// To(Type) templates 
// Template fot ExprToString
toString(op) ::= <<
str(<op>)
>>

// Template for ExprToInt
toInt(op) ::= <<
int(<op>)
>>

// Template for ExprToReal
toReal(op) ::= <<
float(<op>)
>>

// Template for ExprToBool
toBool(op) ::= <<
bool(<op>)
>>


// boolean/loops expressions templatess

// Template for if 
if(condition, compoundIf, compoundElse) ::= <<
if <condition>: 
    <compoundIf>
else:
    <compoundElse>
    pass
>>

// Template for forLoop
for(init, condition, expression, compound) ::= <<
<init>
while <condition>:
    <compound> 
    <expression>
>>

// Template for while
while(condition, compound) ::= <<
while <condition>:
    <compound>
>>

// Template for until
until(condition, compound) ::= <<
while not <condition>:
    <compound>
>>

// Template for litterals, IDs, ...
single(content) ::= <<
<content>
>>

// Template for Color
// #RRGGBB
color(content) ::= <<
ColorToInt("<content>")
>>

// Template for parentisis
parent(op) ::= <<
(<op>)
>>

// Template for functions
function(ID, paramenter_list, statement) ::= <<
def <ID>(<parameter_list>):
    <statement>
>>

// Template for return
return(expression) ::= <<
return <expression>
>>

//Template for paramenter_list
paramenter_list(declaration) ::= <<
    <declaration; separator=",">
>>

//Template for parameter
parameter(ID) ::= <<
<ID>
>>

//Template for functioncall
functioncall(ID, expression) ::= <<
<ID>(<expression>)
>>